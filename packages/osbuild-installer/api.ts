// tslint:disable
/**
 * Osbuild-installer backend service
 * Service that relays image build requests
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Compose
 */
export interface Compose {
    /**
     *
     * @type {string}
     * @memberof Compose
     */
    architecture: string;
    /**
     *
     * @type {string}
     * @memberof Compose
     */
    distribution: string;
    /**
     *
     * @type {string}
     * @memberof Compose
     */
    image_type: string;
    /**
     *
     * @type {Array<Repository>}
     * @memberof Compose
     */
    repositories: Array<Repository>;
}
/**
 *
 * @export
 * @interface ComposeRequest
 */
export interface ComposeRequest {
    /**
     *
     * @type {Array<Compose>}
     * @memberof ComposeRequest
     */
    image_builds: Array<Compose>;
}
/**
 *
 * @export
 * @interface ComposeResponse
 */
export interface ComposeResponse {
    /**
     *
     * @type {string}
     * @memberof ComposeResponse
     */
    compose_id: string;
}
/**
 *
 * @export
 * @interface ComposeStatus
 */
export interface ComposeStatus {
    /**
     *
     * @type {string}
     * @memberof ComposeStatus
     */
    status: string;
}
/**
 *
 * @export
 * @interface Repository
 */
export interface Repository {
    /**
     *
     * @type {string}
     * @memberof Repository
     */
    baseurl: string;
}
/**
 *
 * @export
 * @interface Version
 */
export interface Version {
    /**
     *
     * @type {string}
     * @memberof Version
     */
    version: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * compose image
         * @summary compose image
         * @param {ComposeRequest} composeRequest details of image to be composed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        composeImage(composeRequest: ComposeRequest, options: any = {}): RequestArgs {
            // verify required parameter 'composeRequest' is not null or undefined
            if (composeRequest === null || composeRequest === undefined) {
                throw new RequiredError('composeRequest','Required parameter composeRequest was null or undefined when calling composeImage.');
            }
            const localVarPath = `/compose`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof composeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(composeRequest !== undefined ? composeRequest : {}) : (composeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * status of an image compose
         * @summary get status of an image compose
         * @param {string} composeId Id of compose status to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComposeStatus(composeId: string, options: any = {}): RequestArgs {
            // verify required parameter 'composeId' is not null or undefined
            if (composeId === null || composeId === undefined) {
                throw new RequiredError('composeId','Required parameter composeId was null or undefined when calling getComposeStatus.');
            }
            const localVarPath = `/compose/{composeId}`
                .replace(`{${"composeId"}}`, encodeURIComponent(String(composeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get the service version
         * @summary get the service version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options: any = {}): RequestArgs {
            const localVarPath = `/version`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * compose image
         * @summary compose image
         * @param {ComposeRequest} composeRequest details of image to be composed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        composeImage(composeRequest: ComposeRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComposeResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).composeImage(composeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * status of an image compose
         * @summary get status of an image compose
         * @param {string} composeId Id of compose status to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComposeStatus(composeId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComposeStatus> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getComposeStatus(composeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get the service version
         * @summary get the service version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getVersion(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * compose image
         * @summary compose image
         * @param {ComposeRequest} composeRequest details of image to be composed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        composeImage(composeRequest: ComposeRequest, options?: any): AxiosPromise<ComposeResponse> {
            return DefaultApiFp(configuration).composeImage(composeRequest, options)(axios, basePath);
        },
        /**
         * status of an image compose
         * @summary get status of an image compose
         * @param {string} composeId Id of compose status to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComposeStatus(composeId: string, options?: any): AxiosPromise<ComposeStatus> {
            return DefaultApiFp(configuration).getComposeStatus(composeId, options)(axios, basePath);
        },
        /**
         * get the service version
         * @summary get the service version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options?: any): AxiosPromise<Version> {
            return DefaultApiFp(configuration).getVersion(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * compose image
     * @summary compose image
     * @param {ComposeRequest} composeRequest details of image to be composed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public composeImage(composeRequest: ComposeRequest, options?: any) {
        return DefaultApiFp(this.configuration).composeImage(composeRequest, options)(this.axios, this.basePath);
    }

    /**
     * status of an image compose
     * @summary get status of an image compose
     * @param {string} composeId Id of compose status to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getComposeStatus(composeId: string, options?: any) {
        return DefaultApiFp(this.configuration).getComposeStatus(composeId, options)(this.axios, this.basePath);
    }

    /**
     * get the service version
     * @summary get the service version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVersion(options?: any) {
        return DefaultApiFp(this.configuration).getVersion(options)(this.axios, this.basePath);
    }

}


/**
 * MetaApi - axios parameter creator
 * @export
 */
export const MetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary get the openapi json specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenapiJson(options: any = {}): RequestArgs {
            const localVarPath = `/openapi.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetaApi - functional programming interface
 * @export
 */
export const MetaApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary get the openapi json specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenapiJson(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MetaApiAxiosParamCreator(configuration).getOpenapiJson(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetaApi - factory interface
 * @export
 */
export const MetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary get the openapi json specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenapiJson(options?: any): AxiosPromise<void> {
            return MetaApiFp(configuration).getOpenapiJson(options)(axios, basePath);
        },
    };
};

/**
 * MetaApi - object-oriented interface
 * @export
 * @class MetaApi
 * @extends {BaseAPI}
 */
export class MetaApi extends BaseAPI {
    /**
     *
     * @summary get the openapi json specification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public getOpenapiJson(options?: any) {
        return MetaApiFp(this.configuration).getOpenapiJson(options)(this.axios, this.basePath);
    }

}


